syntax = "proto3";

enum DisconnectReason{
  //Client or server initiated disconnects
  // Server: The server is shutting down
  // Client: User initiated disconnect or client closed
  DISCONNECT_REASON_GOODBYE = 0x00;


  // Server: The server is full
  DISCONNECT_REASON_SERVER_FULL = 0x21;
  // Server: The server is too busy to accept new connections
  DISCONNECT_REASON_TRY_AGAIN_LATER = 0x22;
  // Server: The client is not allowed to connect to the server
  DISCONNECT_REASON_WHITELIST = 0x23;

  // Server: The client should retry connecting to the server (also invalidate resolved host/nickname/etc before reconnecting)
  DISCONNECT_REASON_RECONNECT = 0x30;
  // Server: Forward the client to another server f.e. for load balancing or mini-games on different server
  DISCONNECT_REASON_REDIRECT = 0x31;

  //Disconnect reasons due to operator/game-master/admin actions
  DISCONNECT_REASON_OP = 0xB0;
  // Operator initiated kick
  DISCONNECT_REASON_KICK = 0xB1;
  // Operator initiated ban or client is banned
  DISCONNECT_REASON_BAN = 0xB2;

  //Disconnect reasons due to policy violations or communcation issues (independent of QUIC protocol enforced ones)
  //Timeouts can also occur when the server has to buffer too much data for a client
  DISCONNECT_REASON_TIMEOUT = 0xE0;
  //Rate limit kicks can occur when a client sends too many packets in a short amount of time (ddos?)
  DISCONNECT_REASON_RATE_LIMIT = 0xE1;

}

enum StreamResetReason{
  RESET_REASON_UNKNOWN = 0;

  //The common case of some policy violation
  RESET_REASON_POLICY_VIOLATION = 0xE0;
  RESET_REASON_POLICY_VIOLATION_PACKET_TOO_LARGE = 0xE1;
  RESET_REASON_POLICY_VIOLATION_RATE_LIMIT = 0xE2;
  RESET_REASON_POLICY_VIOLATION_INVALID_PACKET = 0xE3;

}

/* === Common === */
package common;

message ResourceKey{
  string namespace = 0x01;
  string path = 0x02;
}

message ChunkPosition{
  sint64 x = 0x01;
  sint64 y = 0x02;
  sint64 z = 0x03;
  uint32 dimension = 0x10;
}

message Position{
  optional uint32 dimension = 0x0F;
  sint64 x = 0x11;
  sint64 y = 0x12;
  sint64 z = 0x13;
  sint32 test = 0x0FFFFFFF;

  optional double fine_x = 0x21;
  optional double fine_y = 0x22;
  optional double fine_z = 0x23;

  optional float pitch = 0x31;
  optional float yaw = 0x32;
}

message Velocity{
  double x = 0x01;
  double y = 0x02;
  double z = 0x03;
}
